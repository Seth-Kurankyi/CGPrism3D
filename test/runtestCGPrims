using CGPrism3D
using Test
using LinearAlgebra
using StatsBase

const K = 4
const x = K+1
const y = K/2


@time dataA = dataPrsmA();
@time dataT = dataTet();
@time dataF = dataTetF();
@time p1 = tensorGluePrism3DN(dataT,dataT,[1,2,3],[1,2,3])
@time p2 = tensorGluePrism3DN(p1,dataT,[1,8,9],[1,2,3])
#@time dataB = dataPrsmB();
#@time dataB2 = dataPrsmB2();
# Split the prism into tetrahedron and pyramid along the triangular face C = spins(jd1,jd2,je1) = (j4,j5,j6)
#@time for ja in 0.:0.5:y, jb in 0.:0.5:y, jc in 0.:0.5:y
#    sing = tensorSplitSVD(dataB,[1,2,3],[7,8,9,10,11,12],[4,5,6],[ja,jb,jc])[2]
#    if sing[1] != 0
#        println(sing[1:3])
#    end
#end

#t6j =[]
#for ja in 0.:0.5:y, jb in 0.:0.5:y, jc in 0.:0.5:y, jd in 0.:0.5:y, je in 0.:0.5:y, jf in 0.:0.5:y
#    if delta(ja,jb,jc) != 0 
#        #dims = prod(visqrt.([ja,jb,jc,jd,je,jf]))
#        sol = numchop(Tetra6j(ja,jb,jc,jd,je,jf))
#        if sol != 0
#            push!(t6j,sol)
#        end
#    end
#end
#@show t6j
#@show sortperm(dataB[1]) == 1:488

#@time tta = fullSplitPrism3D(dataA,[1,2,3],[7,8,9,10,11,12],[4,5,6]) # split into U, V
#@time ttb = fullSplitPrism3D(dataB,[1,2,3],[7,8,9,10,11,12],[4,5,6]) # split into U, V
#@time ttb2 = fullSplitPrism3D(dataB2,[1,2,3],[7,8,9,10,11,12],[4,5,6]) # split into U, V

#@time tensorGlue(tta[2],ttb[1],[1,7,8],[5,3,2]) # glue along different faces to get prsmUAVB
#@time tensorGlue(ttb[2],tta[1],[2,5,6],[4,2,1]) # glue along different faces to get prsmUBVA
#

@time preffN = tensorGluePrism3DN(dataA,dataA,[2,3,5,8,9],[2,1,4,10,11])

@time @show length(tensorSum(preffN,[5])[1]) 

@time preffN2 = tensorGlueN(preffN,dataF,[7,12,15,14,9],[1,2,5,4,3])
@time  preffN22 = tensorSum(preffN2,[9])
@time @show length(preffN22[2])
@time preffA = tensorGluePrism3D(dataA,dataA,[2,3,5,8,9],[2,1,4,10,11])

@time @show length(tensorSum(preffA,[5])[1]) 
#@time uavb = tensorGluePrism3D(ttb[2],tta[1],[1,7,8],[5,3,2])
#@time ubva = tensorGluePrism3D(tta[2],ttb[1],[2,5,6],[4,2,1])
#@show (length(preffN))
#ansa = []
#for i in preffN
#    ans = (i[2]*i[3])
#    push!(ansa, ans)
#end
#@time @show sum(ansa)
@show (length(preffN[2]),length(preffA[2]))
@show (sum(sort(preffN[2])-sort(preffA[2])))


#@show sortperm(ttb[1][1])
#@show sortperm(tta[1][1])
#@show   tta[1][1] ==  ttb[1][1]
#@show sort(tta[1][1])[15:20]  #sort(ttb[2][1])
#@show (tta[1][2][sortperm(tta[1][1])][15:20], ttb[1][2][sortperm(ttb[1][1])][15:20] )
#@show  numchop.( tta[1][2][sortperm(tta[1][1])] - ttb[1][2][sortperm(ttb[1][1])] )

#@time uv = tensorGluePrism3D(ttb[2],ttb[1],[1,2,3],[4,5,6])
#@show length(uv[2])


#@show numchop.(sort(uv[2]) - sort(dataA[2]))


#@time uv = tensorGlue(ttb[2],tta[1],[1,2,3],[4,5,6])
#@show (length(uavb[2]),length(ubva[2]) )

#@time @show length(tensorGlue(uavb,ubva,[5,7,9,10,12],[7,5,9,10,11])[1]) # full effective prism including bulk variable
#@time @show length(tensorGlue(dataA,dataA,[2,3,5,8,9],[2,1,4,10,11])[1])

#@time @show length(tensorGluePrism3D(uavb,ubva,[1,7,8,5,6],[2,6,5,7,8])[1])
#@time preff = tensorGlue(uavb,ubva,[5,7,9,10,12],[7,5,9,10,11])
#@time preff = tensorGluePrism3D(uavb,ubva,[5,7,9,10,12],[7,5,9,10,11])
#@time preff2 = tensorGluePrism3D2(uavb,ubva,[5,7,9,10,12],[7,5,9,10,11])
#@time preffA = tensorGluePrism3D(dataA,dataA,[2,3,5,8,9],[2,1,4,10,11])
#@show (length(preff[1]),length(preffA[1]) )
#@time @show  ( length(preff[1]), length(preff2[1]) )
#@time prsum = tensorSum(preff,[7])
#@time prsum2 = tensorSum(preff2,[7])
#@time @show  sum(numchop.( prsum[2] - prsum2[2] ))
#@time @show length(tensorSum(preffA,[5])[1]) 

#@time preffA22 = tensor22move(preffA,[7,12,15,14,9])
#@time preffA22 = tensor22move(preffA,[14,15,12,7,9])
#@time preffB22 = tensor22move(preffA,[13,14,6,1,3])
#@time preffC22 = tensor22move(preffA22,[13,14,6,1,3])
#@time preffD22 = tensor22move(preffB22,[14,15,12,7,9])
#@show (length(preffA22[1]),length(preffB22[1]))
#@show (sum(preffA22[2]),sum(preffB22[2]))

#@show (length(preffC22[1]),length(preffD22[1]))
#@show (sum(preffC22[2]),sum(preffD22[2]))
# Apply 2-2 move on faces of prisms
# Inverse 2-2 move on 'bad' face
#@time yy = tensor22move(dataA,[1,2,11,10,4])
#@time yy2 = tensor22move(yy,[1,11,2,10,4])
#@show length(yy2[1])


# test 3-1 move on prism
#@time ss = tensor31move(dataA,[4,5,6,3,1,2]) # get rid of 312
#@show (ss[1]==tta[2][1],numchop(sum(abs.(ss[2])-abs.(tta[2][2]))) )
#@time prUAVB = generalGlue(dataA,dataA,[2,3,5,8,9],[1,2,4,10,11])
#@time @show length(fullSplitPrism3D(dataA,[1,2,3],[7,8,9,10,11,12],[4,5,6])[1][2])

